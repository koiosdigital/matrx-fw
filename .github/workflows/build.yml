# This is a esp idf workflow to build ESP32 based project
name: IDF build

# Controls when the action will run.
on:
  push:
  pull_request:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  variants:
    name: Generate build variants
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: echo "matrix=$(cd variants && ls * | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: variants
    strategy:
      # The build matrix defines the different configurations to run the job with
      matrix:
        config: ${{ fromJson(needs.variants.outputs.matrix) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Handle SDKCONFIG overlay
        run: |
          awk 'FNR==NR { if ($0 ~ /^CONFIG_[A-Za-z0-9_]*=/) { split($0,a,"="); cfg[a[1]]=$0 } next } $0 ~ /^CONFIG_[A-Za-z0-9_]*=/ { key=substr($0,1,index($0,"=")-1); print (key in cfg ? cfg[key] : $0); next } 1; END { for (k in cfg) if (!seen[k]++) print cfg[k] }' variants/${{matrix.config}} sdkconfig > temp && mv temp sdkconfig

      - name: Extract CONFIG_IDF_TARGET
        run: |
          IDF_TARGET=$(grep '^CONFIG_IDF_TARGET=' sdkconfig | cut -d'=' -f2)
          echo "IDF_TARGET=${IDF_TARGET}" >> $GITHUB_ENV

      - name: Set BUILD_VERSION for tagged push
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Setting BUILD_VERSION from tag"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          BUILD_VERSION=${TAG_NAME#v}
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          echo "BUILD_VERSION set to ${BUILD_VERSION}"
          BUILD_VARIANT=${{ matrix.config }}

      - name: idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4.1
          target: ${{ env.IDF_TARGET }}
          command: |
            apt update -y
            apt install -y protobuf-compiler protobuf-c-compiler

            #build
            idf.py build
